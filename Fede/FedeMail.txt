from flask import Blueprint, request, jsonify
from flask_mail import Mail, Message
from datetime import datetime, timedelta
import random
import string
import time

otp_blueprint = Blueprint('otp', __name__)
mail = Mail()

otp_data = {}

def generate_otp(length=6):
    return ''.join(random.choices(string.digits, k=length))

@otp_blueprint.route("/send-otp", methods=["POST"])
def send_otp():
    data = request.json
    email = data.get('email')

    if not email:
        return jsonify({"success": False, "message": "Email non fornita"}), 400

    otp = generate_otp()
    expiration_time = datetime.utcnow() + timedelta(minutes=5)
    otp_data[email] = {"otp": otp, "timestamp": time.time()}

    try:
        msg = Message('Il tuo codice OTP', recipients=[email])
        msg.body = f"Il tuo codice OTP Ã¨: {otp}. Scade in 5 minuti."
        mail.send(msg)
        return jsonify({"success": True, "message": "OTP inviato"})
    except Exception as e:
        print(e)
        return jsonify({"success": False, "message": "Errore nell'invio dell'email"}), 500

@otp_blueprint.route("/verify-otp", methods=["POST"])
def verify_otp():
    data = request.get_json()
    email = data.get("email")
    user_otp = data.get("otp")

    if email not in otp_data:
        return jsonify({"success": False, "message": "OTP non trovato o scaduto"}), 404

    if time.time() - otp_data[email]["timestamp"] > 120:
        del otp_data[email]
        return jsonify({"success": False, "message": "OTP scaduto"}), 400

    if otp_data[email]["otp"] == user_otp:
        del otp_data[email]
        return jsonify({"success": True, "message": "OTP verificato"})
    
    return jsonify({"success": False, "message": "OTP errato"})